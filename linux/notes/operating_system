UNIX 1969 AT&T/Bell Labs
Распространялась свободно
POSIX -  portable operating system interface for UNIX, общий стандарт, реализована даже в Windows
ISO STL C\C++
Shell, Java, Python, PHP
Minix - недостаточно свободная лицензия
Письмо Торвальдса о готовой системе
Windows POSIX можно доустановить систему
Программам нужна
	Абстракция оборудования
	Координация cовместной работы с устройствами
	Изоляцию сбойных приложений
	Обмен между приложении
Пользователь - приложение - ОС - оборудование
Сервисы ОС:
	Процессы
	Память
	Содержимое файлов
	Каталоги и имена файлов
	Безопасность(ФС и процессы)
	(Пользователи, IPC, сеть, терминалы)
  NASM
	ld -s -o hello hello.o
	objdump
  mov edx,len  //загружает в edx длину сообщения
  mov   ecx,msg //загружает в ecx адрес сообщения
  mov   ebx,1       ;file descriptor (stdout) 
  mov   eax,4       ;system call number
  (sys_write)
  int       0x80    ;call kernel
  mov eax,1       ;system call number (sys_exit)
  int       0x80    ;call kernel
  section .data
  msg db  'Hello, world!',0xa
  len   equ $ - msg
Проблемы кода 
sysenter, sysexit
	#include <unistd.h>, POSIX write()
strace - показывает системные вызовы, позволяет посмотреть системные вызовы
	-i выражение для фильтрации
	-f follow forks, следовать за потомками
ltrace - библиотечные вызовы
Системные вызовы
	perror - умеет в стандартные сообщения
	Код возврата при ошибке - -1, заносится в errno	
fork; clone - библиотечная заглушка, ведет себя как классический fork,
каждый процесс - отдельная исполняемая единица, если нитей несколько, то дочерний процесс может иметь только одну, clone исправляет это и даёт выбор
execve("command", flags,) исполняет файл без смени pid и uid
wait ожидает завершения потомка, если потомок завершится раньше, то будет зомби
сирот удочеряет init
При fork сохраняются переменные окружения, exec заменяет код
copy-on-write - делает fork очень быстрым, из-за использования виртуальной памяти назначения одной памяти нескольким процессам
read/write
	Аргументы:
		Номер файла
		Указатель на буфер
		Число байтов
	Возвращает число байтов
Традиционный подход организации ОС
Виртуализуется ЦПУ и оперативная память, каждое приложение считает что распоряжается ими монопольно
	Переключение ЦПУ прозрачно, процессу не нужно беспокоиться о других процессах
	ОС сохраняет и восстанавливает состояние (контекст) ЦПУ при каждом переключении, т.е. регистры, флаги, указатели на таблицы виртуальной памяти сохранятся в таблице процессов
Прерывания процессора по аппаратному таймеру, нить в ядр - планировщих
vmstat - read man
	/proc/number/status
	ps /STATE
Виртуализация памяти, изоляция процессов
 	Варианты
		Вытеснение на диск при переключении, медленно
	Использование сегментов x86, страничная адресация
free - свободная память
Построение систем:
	Монолитное ядро
	Модульное ядро
	Микроядро - все компоненты подгружаются и отключатся
	Экзоядро
Многозадачность кооперативная и вытесняющая
Планирование
	Долгосрочная:
	batch - выполнение задач при минимальной нагрузке на систему
	atq - очередь
	Среднесрочное
	Выгрузка неисполняемых процессов BSD
	Отключение задач при нехватке памяти Android
	Краткосрочное
	Планировщик CPU в ядре
Алгоритмы планировщика ЦПУ
	FIFO/FCFS
	SJF (Shortest Job First)
	Приоритетное планирование (ОСРВ)
	Round-Robin
	Многоуровневые очереди с обратной связью - CFQ
Управление памятью
	Распределение
	Защита
	Разделение (sharing)
	Логическая организация (сегменты)
	Физическая организация (подкачка)
Планирование ввода-вывода
        Сократить время поиска диском
 	Приоритезировать ввод-вывод
	Разделить полосу пропускания устройства между процессами
	Гарантировать исполнение запросов не позднее крайнего срока
Реализации
	– Случайное планирование (RSS) - не встречается
	– FIFO/FCFS FIRST IN, FIRST OUT; FIRST IN, FIRST SERVED
	– LIFO
	– ROUND-ROBIN
	– CFQ complete fair queue - следит за равным распределением операций между процессорами
	– SCAN (лифт) - встречается в ядре виндоуз, обработка в порядке перемещения головок для ускорения производительности.
	– Noop (FIFO с объединением) - два запроса к подряд идущим блокам выполнятся последовательно
	– Anticipatory (упреждающий) - угадывает, какие ещё данные нам ещё понадобятся
	– Deadline
		NCQ - диск сам разберется, как ему записывать
Управление памятью
		Распределение
		Защита
		Разделение
		Логическая и физическая организация
	Кеш-буфер - кеширование запросов к ЖД, при переполнении выбрасываются лишние
	Промахи страниц
	  – Жесткие
	  – Мягкие
	Алгоритмы виртуальной памяти
	  – LRU - list recently used, выкидываются самые старые блоки
	  – Опережающая подгрузка, аналогично с диском
watch command
uptime
	load average 1 5 15
